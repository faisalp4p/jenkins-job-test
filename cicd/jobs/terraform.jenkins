#!/usr/bin/env groovy
for (int i = 1; i <= 5; i++) {
    // folder("Terraform")

    deliveryPipelineView("Terraform - Pipeline ${i}") {
        pipelineInstances(5)
        allowPipelineStart()
        enableManualTriggers()
        enablePaging()
        linkToConsoleLog()
        showChangeLog()
        showDescription()
        pipelines {
            component("Terraform env pipeline ${i}", "Build-${i}")
        }
    }

    job("Build-${i}") {
        deliveryPipelineConfiguration("Build", "Build")
        wrappers {
            deliveryPipelineVersion('1.0.0.\$BUILD_NUMBER', true)
        }
        publishers {
            // downstreamParameterized {
            //     trigger('Demo/Sonar') {
            //         parameters {
            //             currentBuild()
            //         }
            //     }
            //     trigger('Demo/DeployCI') {
            //         condition('SUCCESS')
            //         parameters {
            //             currentBuild()
            //         }
            //     }
            // }
            downstream("env-dev-plan-${i}", 'SUCCESS')
        }
    }


    job("env-dev-plan-${i}") {
        deliveryPipelineConfiguration("env-dev", "Plan")

        wrappers {
            buildName('\$PIPELINE_VERSION')
        }

        steps {
            shell 'pwd && ls'
        }

        publishers {
            buildPipelineTrigger("env-dev-apply-${i}")
        }
    }

    job("env-dev-apply-${i}") {
        deliveryPipelineConfiguration("env-dev", "Apply")

        wrappers {
            buildName('\$PIPELINE_VERSION')
        }

        steps {
            shell 'sleep 10'
        }


        publishers {
        downstream("env-prod-plan-${i}", 'SUCCESS')
        }
    }

    job("env-prod-plan-${i}") {
        deliveryPipelineConfiguration("env-prod", "Plan")

        wrappers {
            buildName('\$PIPELINE_VERSION')
        }

        steps {
            shell 'sleep 5'
        }

        publishers {
            publishers {
            buildPipelineTrigger("env-prod-apply-${i}")
        }
        }
    }

    job("env-prod-apply-${i}") {
        deliveryPipelineConfiguration("env-prod", "Apply")

        wrappers {
            buildName('\$PIPELINE_VERSION')
        }

        steps {
            shell 'sleep 10'
        }

        // publishers {
        //     buildPipelineTrigger('Demo/DeployProd') {
        //     }
        // }
    }

    // job('Demo/DeployProd') {
    //     deliveryPipelineConfiguration("Prod", "Deploy")

    //     wrappers {
    //         buildName('\$PIPELINE_VERSION')
    //     }

    //     steps {
    //         shell 'sleep 5'
    //     }

    //     publishers {
    //         downstreamParameterized {
    //             trigger('Demo/TestProd') {
    //                 condition('SUCCESS')
    //                 parameters {
    //                     currentBuild()
    //                 }
    //             }
    //         }
    //     }
    // }

    // job('Demo/TestProd') {
    //     deliveryPipelineConfiguration("Prod", "Test")

    //     wrappers {
    //         buildName('\$PIPELINE_VERSION')
    //     }

    //     steps {
    //         shell 'sleep 5'
    //     }
    // }
}